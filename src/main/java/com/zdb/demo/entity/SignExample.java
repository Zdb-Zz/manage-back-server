package com.zdb.demo.entity;

import java.util.ArrayList;
import java.util.List;

public class SignExample {

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table sign
     *
     * @mbggenerated
     */
    protected String orderByClause;

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table sign
     *
     * @mbggenerated
     */
    protected boolean distinct;

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table sign
     *
     * @mbggenerated
     */
    protected List<Criteria> oredCriteria;

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table sign
     *
     * @mbggenerated
     */
    protected Integer limitStart;

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table sign
     *
     * @mbggenerated
     */
    protected Integer limitEnd;

    /**
     *  构造查询条件,sign
     */
    public SignExample() {
        oredCriteria = new ArrayList<Criteria>();
    }

    /**
     *  设置排序字段,sign
     *
     * @param orderByClause 排序字段
     */
    public void setOrderByClause(String orderByClause) {
        this.orderByClause = orderByClause;
    }

    /**
     *  获取排序字段,sign
     */
    public String getOrderByClause() {
        return orderByClause;
    }

    /**
     *  设置过滤重复数据,sign
     *
     * @param distinct 是否过滤重复数据
     */
    public void setDistinct(boolean distinct) {
        this.distinct = distinct;
    }

    /**
     *  是否过滤重复数据,sign
     */
    public boolean isDistinct() {
        return distinct;
    }

    /**
     *  获取当前的查询条件实例,sign
     */
    public List<Criteria> getOredCriteria() {
        return oredCriteria;
    }

    /**
     * ,sign
     *
     * @param criteria 过滤条件实例
     */
    public void or(Criteria criteria) {
        oredCriteria.add(criteria);
    }

    /**
     * ,sign
     */
    public Criteria or() {
        Criteria criteria = createCriteriaInternal();
        oredCriteria.add(criteria);
        return criteria;
    }

    /**
     *  创建一个查询条件,sign
     */
    public Criteria createCriteria() {
        Criteria criteria = createCriteriaInternal();
        if (oredCriteria.size() == 0) {
            oredCriteria.add(criteria);
        }
        return criteria;
    }

    /**
     *  内部构建查询条件对象,sign
     */
    protected Criteria createCriteriaInternal() {
        Criteria criteria = new Criteria();
        return criteria;
    }

    /**
     *  清除查询条件,sign
     */
    public void clear() {
        oredCriteria.clear();
        orderByClause = null;
        distinct = false;
    }

    /**
     * ,sign
     *
     * @param limitStart
     */
    public void setLimitStart(Integer limitStart) {
        this.limitStart=limitStart;
    }

    /**
     * ,sign
     */
    public Integer getLimitStart() {
        return limitStart;
    }

    /**
     * ,sign
     *
     * @param limitEnd
     */
    public void setLimitEnd(Integer limitEnd) {
        this.limitEnd=limitEnd;
    }

    /**
     * ,sign
     */
    public Integer getLimitEnd() {
        return limitEnd;
    }

    /**
     * 
     * GeneratedCriteria
     * 数据库表：sign
     */
    protected abstract static class GeneratedCriteria {

        protected List<Criterion> criteria;

        protected GeneratedCriteria() {
            super();
            criteria = new ArrayList<Criterion>();
        }

        public boolean isValid() {
            return criteria.size() > 0;
        }

        public List<Criterion> getAllCriteria() {
            return criteria;
        }

        public List<Criterion> getCriteria() {
            return criteria;
        }

        protected void addCriterion(String condition) {
            if (condition == null) {
                throw new RuntimeException("Value for condition cannot be null");
            }
            criteria.add(new Criterion(condition));
        }

        protected void addCriterion(String condition, Object value, String property) {
            if (value == null) {
                throw new RuntimeException("Value for " + property + " cannot be null");
            }
            criteria.add(new Criterion(condition, value));
        }

        protected void addCriterion(String condition, Object value1, Object value2, String property) {
            if (value1 == null || value2 == null) {
                throw new RuntimeException("Between values for " + property + " cannot be null");
            }
            criteria.add(new Criterion(condition, value1, value2));
        }

        public Criteria andSignIdIsNull() {
            addCriterion("sign_id is null");
            return (Criteria) this;
        }

        public Criteria andSignIdIsNotNull() {
            addCriterion("sign_id is not null");
            return (Criteria) this;
        }

        public Criteria andSignIdEqualTo(Integer value) {
            addCriterion("sign_id =", value, "signId");
            return (Criteria) this;
        }

        public Criteria andSignIdNotEqualTo(Integer value) {
            addCriterion("sign_id <>", value, "signId");
            return (Criteria) this;
        }

        public Criteria andSignIdGreaterThan(Integer value) {
            addCriterion("sign_id >", value, "signId");
            return (Criteria) this;
        }

        public Criteria andSignIdGreaterThanOrEqualTo(Integer value) {
            addCriterion("sign_id >=", value, "signId");
            return (Criteria) this;
        }

        public Criteria andSignIdLessThan(Integer value) {
            addCriterion("sign_id <", value, "signId");
            return (Criteria) this;
        }

        public Criteria andSignIdLessThanOrEqualTo(Integer value) {
            addCriterion("sign_id <=", value, "signId");
            return (Criteria) this;
        }

        public Criteria andSignIdIn(List<Integer> values) {
            addCriterion("sign_id in", values, "signId");
            return (Criteria) this;
        }

        public Criteria andSignIdNotIn(List<Integer> values) {
            addCriterion("sign_id not in", values, "signId");
            return (Criteria) this;
        }

        public Criteria andSignIdBetween(Integer value1, Integer value2) {
            addCriterion("sign_id between", value1, value2, "signId");
            return (Criteria) this;
        }

        public Criteria andSignIdNotBetween(Integer value1, Integer value2) {
            addCriterion("sign_id not between", value1, value2, "signId");
            return (Criteria) this;
        }

        public Criteria andUserIdIsNull() {
            addCriterion("user_id is null");
            return (Criteria) this;
        }

        public Criteria andUserIdIsNotNull() {
            addCriterion("user_id is not null");
            return (Criteria) this;
        }

        public Criteria andUserIdEqualTo(Integer value) {
            addCriterion("user_id =", value, "userId");
            return (Criteria) this;
        }

        public Criteria andUserIdNotEqualTo(Integer value) {
            addCriterion("user_id <>", value, "userId");
            return (Criteria) this;
        }

        public Criteria andUserIdGreaterThan(Integer value) {
            addCriterion("user_id >", value, "userId");
            return (Criteria) this;
        }

        public Criteria andUserIdGreaterThanOrEqualTo(Integer value) {
            addCriterion("user_id >=", value, "userId");
            return (Criteria) this;
        }

        public Criteria andUserIdLessThan(Integer value) {
            addCriterion("user_id <", value, "userId");
            return (Criteria) this;
        }

        public Criteria andUserIdLessThanOrEqualTo(Integer value) {
            addCriterion("user_id <=", value, "userId");
            return (Criteria) this;
        }

        public Criteria andUserIdIn(List<Integer> values) {
            addCriterion("user_id in", values, "userId");
            return (Criteria) this;
        }

        public Criteria andUserIdNotIn(List<Integer> values) {
            addCriterion("user_id not in", values, "userId");
            return (Criteria) this;
        }

        public Criteria andUserIdBetween(Integer value1, Integer value2) {
            addCriterion("user_id between", value1, value2, "userId");
            return (Criteria) this;
        }

        public Criteria andUserIdNotBetween(Integer value1, Integer value2) {
            addCriterion("user_id not between", value1, value2, "userId");
            return (Criteria) this;
        }

        public Criteria andContinueDaIsNull() {
            addCriterion("continue_da is null");
            return (Criteria) this;
        }

        public Criteria andContinueDaIsNotNull() {
            addCriterion("continue_da is not null");
            return (Criteria) this;
        }

        public Criteria andContinueDaEqualTo(Integer value) {
            addCriterion("continue_da =", value, "continueDa");
            return (Criteria) this;
        }

        public Criteria andContinueDaNotEqualTo(Integer value) {
            addCriterion("continue_da <>", value, "continueDa");
            return (Criteria) this;
        }

        public Criteria andContinueDaGreaterThan(Integer value) {
            addCriterion("continue_da >", value, "continueDa");
            return (Criteria) this;
        }

        public Criteria andContinueDaGreaterThanOrEqualTo(Integer value) {
            addCriterion("continue_da >=", value, "continueDa");
            return (Criteria) this;
        }

        public Criteria andContinueDaLessThan(Integer value) {
            addCriterion("continue_da <", value, "continueDa");
            return (Criteria) this;
        }

        public Criteria andContinueDaLessThanOrEqualTo(Integer value) {
            addCriterion("continue_da <=", value, "continueDa");
            return (Criteria) this;
        }

        public Criteria andContinueDaIn(List<Integer> values) {
            addCriterion("continue_da in", values, "continueDa");
            return (Criteria) this;
        }

        public Criteria andContinueDaNotIn(List<Integer> values) {
            addCriterion("continue_da not in", values, "continueDa");
            return (Criteria) this;
        }

        public Criteria andContinueDaBetween(Integer value1, Integer value2) {
            addCriterion("continue_da between", value1, value2, "continueDa");
            return (Criteria) this;
        }

        public Criteria andContinueDaNotBetween(Integer value1, Integer value2) {
            addCriterion("continue_da not between", value1, value2, "continueDa");
            return (Criteria) this;
        }

        public Criteria andRigninTimeIsNull() {
            addCriterion("rignin_time is null");
            return (Criteria) this;
        }

        public Criteria andRigninTimeIsNotNull() {
            addCriterion("rignin_time is not null");
            return (Criteria) this;
        }

        public Criteria andRigninTimeEqualTo(Integer value) {
            addCriterion("rignin_time =", value, "rigninTime");
            return (Criteria) this;
        }

        public Criteria andRigninTimeNotEqualTo(Integer value) {
            addCriterion("rignin_time <>", value, "rigninTime");
            return (Criteria) this;
        }

        public Criteria andRigninTimeGreaterThan(Integer value) {
            addCriterion("rignin_time >", value, "rigninTime");
            return (Criteria) this;
        }

        public Criteria andRigninTimeGreaterThanOrEqualTo(Integer value) {
            addCriterion("rignin_time >=", value, "rigninTime");
            return (Criteria) this;
        }

        public Criteria andRigninTimeLessThan(Integer value) {
            addCriterion("rignin_time <", value, "rigninTime");
            return (Criteria) this;
        }

        public Criteria andRigninTimeLessThanOrEqualTo(Integer value) {
            addCriterion("rignin_time <=", value, "rigninTime");
            return (Criteria) this;
        }

        public Criteria andRigninTimeIn(List<Integer> values) {
            addCriterion("rignin_time in", values, "rigninTime");
            return (Criteria) this;
        }

        public Criteria andRigninTimeNotIn(List<Integer> values) {
            addCriterion("rignin_time not in", values, "rigninTime");
            return (Criteria) this;
        }

        public Criteria andRigninTimeBetween(Integer value1, Integer value2) {
            addCriterion("rignin_time between", value1, value2, "rigninTime");
            return (Criteria) this;
        }

        public Criteria andRigninTimeNotBetween(Integer value1, Integer value2) {
            addCriterion("rignin_time not between", value1, value2, "rigninTime");
            return (Criteria) this;
        }

        public Criteria andRigninCounIsNull() {
            addCriterion("rignin_coun is null");
            return (Criteria) this;
        }

        public Criteria andRigninCounIsNotNull() {
            addCriterion("rignin_coun is not null");
            return (Criteria) this;
        }

        public Criteria andRigninCounEqualTo(Integer value) {
            addCriterion("rignin_coun =", value, "rigninCoun");
            return (Criteria) this;
        }

        public Criteria andRigninCounNotEqualTo(Integer value) {
            addCriterion("rignin_coun <>", value, "rigninCoun");
            return (Criteria) this;
        }

        public Criteria andRigninCounGreaterThan(Integer value) {
            addCriterion("rignin_coun >", value, "rigninCoun");
            return (Criteria) this;
        }

        public Criteria andRigninCounGreaterThanOrEqualTo(Integer value) {
            addCriterion("rignin_coun >=", value, "rigninCoun");
            return (Criteria) this;
        }

        public Criteria andRigninCounLessThan(Integer value) {
            addCriterion("rignin_coun <", value, "rigninCoun");
            return (Criteria) this;
        }

        public Criteria andRigninCounLessThanOrEqualTo(Integer value) {
            addCriterion("rignin_coun <=", value, "rigninCoun");
            return (Criteria) this;
        }

        public Criteria andRigninCounIn(List<Integer> values) {
            addCriterion("rignin_coun in", values, "rigninCoun");
            return (Criteria) this;
        }

        public Criteria andRigninCounNotIn(List<Integer> values) {
            addCriterion("rignin_coun not in", values, "rigninCoun");
            return (Criteria) this;
        }

        public Criteria andRigninCounBetween(Integer value1, Integer value2) {
            addCriterion("rignin_coun between", value1, value2, "rigninCoun");
            return (Criteria) this;
        }

        public Criteria andRigninCounNotBetween(Integer value1, Integer value2) {
            addCriterion("rignin_coun not between", value1, value2, "rigninCoun");
            return (Criteria) this;
        }

        public Criteria andSignGetPoIsNull() {
            addCriterion("sign_get_po is null");
            return (Criteria) this;
        }

        public Criteria andSignGetPoIsNotNull() {
            addCriterion("sign_get_po is not null");
            return (Criteria) this;
        }

        public Criteria andSignGetPoEqualTo(String value) {
            addCriterion("sign_get_po =", value, "signGetPo");
            return (Criteria) this;
        }

        public Criteria andSignGetPoNotEqualTo(String value) {
            addCriterion("sign_get_po <>", value, "signGetPo");
            return (Criteria) this;
        }

        public Criteria andSignGetPoGreaterThan(String value) {
            addCriterion("sign_get_po >", value, "signGetPo");
            return (Criteria) this;
        }

        public Criteria andSignGetPoGreaterThanOrEqualTo(String value) {
            addCriterion("sign_get_po >=", value, "signGetPo");
            return (Criteria) this;
        }

        public Criteria andSignGetPoLessThan(String value) {
            addCriterion("sign_get_po <", value, "signGetPo");
            return (Criteria) this;
        }

        public Criteria andSignGetPoLessThanOrEqualTo(String value) {
            addCriterion("sign_get_po <=", value, "signGetPo");
            return (Criteria) this;
        }

        public Criteria andSignGetPoLike(String value) {
            addCriterion("sign_get_po like", value, "signGetPo");
            return (Criteria) this;
        }

        public Criteria andSignGetPoNotLike(String value) {
            addCriterion("sign_get_po not like", value, "signGetPo");
            return (Criteria) this;
        }

        public Criteria andSignGetPoIn(List<String> values) {
            addCriterion("sign_get_po in", values, "signGetPo");
            return (Criteria) this;
        }

        public Criteria andSignGetPoNotIn(List<String> values) {
            addCriterion("sign_get_po not in", values, "signGetPo");
            return (Criteria) this;
        }

        public Criteria andSignGetPoBetween(String value1, String value2) {
            addCriterion("sign_get_po between", value1, value2, "signGetPo");
            return (Criteria) this;
        }

        public Criteria andSignGetPoNotBetween(String value1, String value2) {
            addCriterion("sign_get_po not between", value1, value2, "signGetPo");
            return (Criteria) this;
        }
    }

    /**
     * 类注释
     * Criteria
     * 数据库表：sign
     */
    public static class Criteria extends GeneratedCriteria {


        protected Criteria() {
            super();
        }
    }

    /**
     * 
     * Criterion
     * 数据库表：sign
     */
    public static class Criterion {

        private String condition;

        private Object value;

        private Object secondValue;

        private boolean noValue;

        private boolean singleValue;

        private boolean betweenValue;

        private boolean listValue;

        private String typeHandler;

        public String getCondition() {
            return condition;
        }

        public Object getValue() {
            return value;
        }

        public Object getSecondValue() {
            return secondValue;
        }

        public boolean isNoValue() {
            return noValue;
        }

        public boolean isSingleValue() {
            return singleValue;
        }

        public boolean isBetweenValue() {
            return betweenValue;
        }

        public boolean isListValue() {
            return listValue;
        }

        public String getTypeHandler() {
            return typeHandler;
        }

        protected Criterion(String condition) {
            super();
            this.condition = condition;
            this.typeHandler = null;
            this.noValue = true;
        }

        protected Criterion(String condition, Object value, String typeHandler) {
            super();
            this.condition = condition;
            this.value = value;
            this.typeHandler = typeHandler;
            if (value instanceof List<?>) {
                this.listValue = true;
            } else {
                this.singleValue = true;
            }
        }

        protected Criterion(String condition, Object value) {
            this(condition, value, null);
        }

        protected Criterion(String condition, Object value, Object secondValue, String typeHandler) {
            super();
            this.condition = condition;
            this.value = value;
            this.secondValue = secondValue;
            this.typeHandler = typeHandler;
            this.betweenValue = true;
        }

        protected Criterion(String condition, Object value, Object secondValue) {
            this(condition, value, secondValue, null);
        }
    }
}